#include <iostream>
#include <string>

using namespace std;

string colorst[3] = { "Green", "Red", "Purple" };
string shapest[3] = { "Oval", "Rectangle", "Distorted" };
string brightnessst[3] = { "Full", "Half", "Empty" };//전역 범위로 정의 수정 필요

class Card{
	int color, num, shape, brightness;

public:
	Card()//배열로 선언을 위한 기본형
	{
		color = 0;
		num = 0;
		shape = 0;
		brightness = 0;
	}
	Card(int n)//0<=n<=80(3진법 취급함) 카드 넘버를 입력받아서 지정할 때
	{
		color = n / (3 * 3 * 3);
		num = (n - color * 27) / 9;
		shape = (n - color * 27 - num * 9) / 3;
		brightness = n - color * 27 - num * 9 - shape * 3;
	}
	Card(int color, int num, int shape, int brightness)//카드 요소를 입력받아서 지정할 때
	{
		this->color = color;
		this->num = num;
		this->shape = shape;
		this->brightness = brightness;
	}
	void printcard()//카드 요소를 정리하여 출력
	{
		cout << "Color : " << colorst[color] << endl;
		cout << "Number : " << num + 1 << endl;
		cout << "Shape : " << shapest[shape] << endl;
		cout << "Brightness : " << brightnessst[brightness] << endl;
	}
	inline int getcolor()
	{
		return color;
	}
	inline int getnum()
	{
		return num;
	}
	inline int getshape()
	{
		return shape;
	}
	inline int getbright()
	{
		return brightness;
	}
};
bool cardset(Card c1, Card c2, Card c3)//3장의 카드가 set조건을 만족하면 1 반환, 아니면 0 반환
{
	bool out = (((c1.getcolor() + c2.getcolor() + c3.getcolor()) % 3) == 0) &&
		(((c1.getnum() + c2.getnum() + c3.getnum()) % 3) == 0) &&
		(((c1.getshape() + c2.getshape() + c3.getshape()) % 3) == 0) &&
		(((c1.getbright() + c2.getbright() + c3.getbright()) % 3) == 0);//모든 요소 각각의 합이 3의 배수인 경우 set임. set인 경우 out에 1 저장
	return out;
}

void numar(int n, int k)//nCk 숫자열을 출력(전체 카드 덱에서 SET을 만족하는 카드가 없을 경우를 인식하기 위해 combination함수가 필요하므로 일단 만듦)
{
	int i, j, r, count, re, kcou, ncou;
	int* karr = new int[k];
	count = 0;
	for (i = 0; i < k; i++)//콤비네이션 출력용 배열에 1, 2 ~ k 저장
	{
		r = i + 1;
		karr[i] = r;
	}

	re = 1;
	while (re)
	{
		int knum;
		knum = karr[k - 1];
		for (i = 0; i < n - knum + 1; i++)//콤비네이션 의 마지막 숫자를 1씩 증가시키면서 출력
		{
			r = i + knum;
			karr[k - 1] = r;
			for (j = 0; j < k; j++)
				printf("%d,", karr[j]);
			printf("\n");
			count++;
		}
		kcou = k - 1;//k-a 번째 콤비네이션 숫자와 n-a 가 다를 경우 k-a번째 콤비넨이션 숫자를 1 증가시키고, k-a+1, k-a+2...k번째 콤비네이션 숫자를 1씩 증가시켜 할당.
		ncou = n;
		while (karr[kcou] == ncou)
		{
			kcou--;
			ncou--;
		}
		if (kcou < 0)//1번째 콤비네이션의 숫자가 최대가 되면 반복 종료, 아니면 반복
			re = 0;
		else
		{
			karr[kcou]++;
			for (kcou; kcou < k; kcou++)
			{
				karr[kcou + 1] = karr[kcou] + 1;
			}
			re = 1;
		}
	}
	i = 0, j = 0, r = 0;//초기화
	delete [] karr;
}
